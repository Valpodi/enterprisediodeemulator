import subprocess
import time


class TestHelpers:
    @staticmethod
    def read_udp_msg(server_sock,
                     expected_output=b""):
        rx_msg = server_sock.recvfrom(1024)[0]
        print(f"received {rx_msg}")
        return expected_output in rx_msg, rx_msg

    @staticmethod
    def wait_for_action(action, message, delay=2, attempts=20):
        for i in range(attempts):
            success, msg = action()
            if not success:
                print("waiting for action..")
                if i == attempts-1:
                    raise Exception("Expected action not performed: " + message)
                time.sleep(delay)
            else:
                return msg

    @staticmethod
    def wait_for_open_comms_ports(low_address="emulator_diode_emulator_1"):
        return TestHelpers.wait_for_action(lambda: TestHelpers.ping_port(low_address),
                                      f"port 514 should be open", attempts=30)

    @staticmethod
    def ping_port(addr):
        return (subprocess.call(f"nc -zvu {addr} 41024 -w 1".split()) == 0), 0

    @staticmethod
    def get_example_control_header():
        return b'\xd6\xb7\x79\x3e\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

    @staticmethod
    def get_bad_example_control_header():
        return b'\xd6\xb7\x79\x3e\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

